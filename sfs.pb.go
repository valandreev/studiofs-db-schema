// All comments in the code must be in English.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: sfs.proto

package studiofs_db_schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines the type of the filesystem object.
type Inode_FileType int32

const (
	Inode_UNSPECIFIED Inode_FileType = 0
	Inode_FILE        Inode_FileType = 1
	Inode_DIRECTORY   Inode_FileType = 2
	Inode_SYMLINK     Inode_FileType = 3
)

// Enum value maps for Inode_FileType.
var (
	Inode_FileType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "FILE",
		2: "DIRECTORY",
		3: "SYMLINK",
	}
	Inode_FileType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"FILE":        1,
		"DIRECTORY":   2,
		"SYMLINK":     3,
	}
)

func (x Inode_FileType) Enum() *Inode_FileType {
	p := new(Inode_FileType)
	*p = x
	return p
}

func (x Inode_FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Inode_FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_sfs_proto_enumTypes[0].Descriptor()
}

func (Inode_FileType) Type() protoreflect.EnumType {
	return &file_sfs_proto_enumTypes[0]
}

func (x Inode_FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Inode_FileType.Descriptor instead.
func (Inode_FileType) EnumDescriptor() ([]byte, []int) {
	return file_sfs_proto_rawDescGZIP(), []int{5, 0}
}

// FilesystemConfig defines the primary configuration for a filesystem instance.
// It acts as the "passport" for a disk, containing all necessary connection
// and operational parameters.
// DB Key: "fs:config:<uuid>"
type FilesystemConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the filesystem (UUID).
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// User-facing, human-readable name for the filesystem (e.g., "Project_X_Renders").
	FriendlyName string `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	// Timestamp of when the filesystem was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Configuration for the S3-compatible object storage backend.
	S3Config *S3Config `protobuf:"bytes,4,opt,name=s3_config,json=s3Config,proto3" json:"s3_config,omitempty"`
	// Parameters for how files are chunked into slices.
	ChunkConfig   *ChunkConfig `protobuf:"bytes,5,opt,name=chunk_config,json=chunkConfig,proto3" json:"chunk_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemConfig) Reset() {
	*x = FilesystemConfig{}
	mi := &file_sfs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemConfig) ProtoMessage() {}

func (x *FilesystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sfs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemConfig.ProtoReflect.Descriptor instead.
func (*FilesystemConfig) Descriptor() ([]byte, []int) {
	return file_sfs_proto_rawDescGZIP(), []int{0}
}

func (x *FilesystemConfig) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FilesystemConfig) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *FilesystemConfig) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FilesystemConfig) GetS3Config() *S3Config {
	if x != nil {
		return x.S3Config
	}
	return nil
}

func (x *FilesystemConfig) GetChunkConfig() *ChunkConfig {
	if x != nil {
		return x.ChunkConfig
	}
	return nil
}

// S3Config holds all necessary parameters to connect to an S3-compatible backend.
type S3Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The full URL of the S3 endpoint (e.g., "s3.us-west-2.amazonaws.com").
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// The name of the S3 bucket where data will be stored.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The S3 access key credential.
	AccessKey string `protobuf:"bytes,3,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	// The S3 secret key credential.
	SecretKey string `protobuf:"bytes,4,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// The AWS region of the bucket (e.g., "us-east-1").
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// A prefix prepended to all S3 object keys, allowing the filesystem
	// to reside within a "subdirectory" of a bucket.
	// Example: "my-disk-name/framestore/"
	KeyPrefix     string `protobuf:"bytes,6,opt,name=key_prefix,json=keyPrefix,proto3" json:"key_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3Config) Reset() {
	*x = S3Config{}
	mi := &file_sfs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Config) ProtoMessage() {}

func (x *S3Config) ProtoReflect() protoreflect.Message {
	mi := &file_sfs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Config.ProtoReflect.Descriptor instead.
func (*S3Config) Descriptor() ([]byte, []int) {
	return file_sfs_proto_rawDescGZIP(), []int{1}
}

func (x *S3Config) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *S3Config) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3Config) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *S3Config) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *S3Config) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *S3Config) GetKeyPrefix() string {
	if x != nil {
		return x.KeyPrefix
	}
	return ""
}

// ChunkConfig defines parameters for file chunking.
type ChunkConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum size for a data chunk in megabytes (MB).
	// This also defines the standard size of a slice.
	MaxChunkSizeMb uint32 `protobuf:"varint,1,opt,name=max_chunk_size_mb,json=maxChunkSizeMb,proto3" json:"max_chunk_size_mb,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChunkConfig) Reset() {
	*x = ChunkConfig{}
	mi := &file_sfs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkConfig) ProtoMessage() {}

func (x *ChunkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sfs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkConfig.ProtoReflect.Descriptor instead.
func (*ChunkConfig) Descriptor() ([]byte, []int) {
	return file_sfs_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkConfig) GetMaxChunkSizeMb() uint32 {
	if x != nil {
		return x.MaxChunkSizeMb
	}
	return 0
}

// Slice represents a single, contiguous block of data stored as an object in S3.
// A slice is the fundamental unit of storage. It can contain data from one or more files.
// DB Key: "slice:<slice_id>"
type Slice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A globally unique identifier for this slice.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The total size of this slice in bytes.
	Size          uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Slice) Reset() {
	*x = Slice{}
	mi := &file_sfs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slice) ProtoMessage() {}

func (x *Slice) ProtoReflect() protoreflect.Message {
	mi := &file_sfs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slice.ProtoReflect.Descriptor instead.
func (*Slice) Descriptor() ([]byte, []int) {
	return file_sfs_proto_rawDescGZIP(), []int{3}
}

func (x *Slice) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Slice) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

// SliceRef represents a reference to a portion of a Slice that belongs to a specific file.
// A file is composed of an ordered list of one or more SliceRefs.
type SliceRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the Slice being referenced.
	SliceId uint64 `protobuf:"varint,1,opt,name=slice_id,json=sliceId,proto3" json:"slice_id,omitempty"`
	// The starting offset of the data within the referenced slice.
	OffsetInSlice uint32 `protobuf:"varint,2,opt,name=offset_in_slice,json=offsetInSlice,proto3" json:"offset_in_slice,omitempty"`
	// The length of the data segment within the slice that belongs to the file.
	Length uint32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// The starting offset of this data segment within the file itself.
	OffsetInFile  uint64 `protobuf:"varint,4,opt,name=offset_in_file,json=offsetInFile,proto3" json:"offset_in_file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SliceRef) Reset() {
	*x = SliceRef{}
	mi := &file_sfs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SliceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceRef) ProtoMessage() {}

func (x *SliceRef) ProtoReflect() protoreflect.Message {
	mi := &file_sfs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceRef.ProtoReflect.Descriptor instead.
func (*SliceRef) Descriptor() ([]byte, []int) {
	return file_sfs_proto_rawDescGZIP(), []int{4}
}

func (x *SliceRef) GetSliceId() uint64 {
	if x != nil {
		return x.SliceId
	}
	return 0
}

func (x *SliceRef) GetOffsetInSlice() uint32 {
	if x != nil {
		return x.OffsetInSlice
	}
	return 0
}

func (x *SliceRef) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *SliceRef) GetOffsetInFile() uint64 {
	if x != nil {
		return x.OffsetInFile
	}
	return 0
}

// Inode represents the metadata for a single filesystem object (file, directory, or symlink).
// It contains all information about an object except for its name and location in the hierarchy.
// DB Key: "inode:<fs_uuid>:<inode_id>"
type Inode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for this inode within the filesystem.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of object this inode represents.
	Type Inode_FileType `protobuf:"varint,2,opt,name=type,proto3,enum=sfsproto.Inode_FileType" json:"type,omitempty"`
	// The total logical size of the file in bytes. For directories and symlinks, this is typically 0.
	Length uint64 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// Access permissions in standard Unix octal format (e.g., 755).
	Permissions uint32 `protobuf:"varint,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// The user ID (UID) of the owner.
	Uid uint32 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// The group ID (GID) of the owner.
	Gid uint32 `protobuf:"varint,6,opt,name=gid,proto3" json:"gid,omitempty"`
	// The timestamp of the last data modification (mtime).
	Mtime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// The timestamp of the last metadata change (ctime).
	Ctime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// If type is SYMLINK, this field stores the target path of the link.
	// It is unused for other file types.
	SymlinkTarget string `protobuf:"bytes,9,opt,name=symlink_target,json=symlinkTarget,proto3" json:"symlink_target,omitempty"`
	// An ordered list of slice references that constitute the file's content.
	// This field is only used for inodes of type FILE.
	Slices        []*SliceRef `protobuf:"bytes,10,rep,name=slices,proto3" json:"slices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Inode) Reset() {
	*x = Inode{}
	mi := &file_sfs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Inode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inode) ProtoMessage() {}

func (x *Inode) ProtoReflect() protoreflect.Message {
	mi := &file_sfs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inode.ProtoReflect.Descriptor instead.
func (*Inode) Descriptor() ([]byte, []int) {
	return file_sfs_proto_rawDescGZIP(), []int{5}
}

func (x *Inode) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Inode) GetType() Inode_FileType {
	if x != nil {
		return x.Type
	}
	return Inode_UNSPECIFIED
}

func (x *Inode) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Inode) GetPermissions() uint32 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *Inode) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Inode) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *Inode) GetMtime() *timestamppb.Timestamp {
	if x != nil {
		return x.Mtime
	}
	return nil
}

func (x *Inode) GetCtime() *timestamppb.Timestamp {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *Inode) GetSymlinkTarget() string {
	if x != nil {
		return x.SymlinkTarget
	}
	return ""
}

func (x *Inode) GetSlices() []*SliceRef {
	if x != nil {
		return x.Slices
	}
	return nil
}

// DirectoryEntry represents an entry within a directory, linking a name to an inode.
// It forms the hierarchical structure of the filesystem.
// DB Key: "edge:<fs_uuid>:<parent_inode>:<name>"
type DirectoryEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The inode number of the child object (file, directory, or symlink).
	Inode uint64 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
	// The type of the child object. Storing it here allows `ls` to be more
	// efficient by avoiding a separate Inode lookup for each entry.
	Type          Inode_FileType `protobuf:"varint,2,opt,name=type,proto3,enum=sfsproto.Inode_FileType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectoryEntry) Reset() {
	*x = DirectoryEntry{}
	mi := &file_sfs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryEntry) ProtoMessage() {}

func (x *DirectoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sfs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryEntry.ProtoReflect.Descriptor instead.
func (*DirectoryEntry) Descriptor() ([]byte, []int) {
	return file_sfs_proto_rawDescGZIP(), []int{6}
}

func (x *DirectoryEntry) GetInode() uint64 {
	if x != nil {
		return x.Inode
	}
	return 0
}

func (x *DirectoryEntry) GetType() Inode_FileType {
	if x != nil {
		return x.Type
	}
	return Inode_UNSPECIFIED
}

var File_sfs_proto protoreflect.FileDescriptor

const file_sfs_proto_rawDesc = "" +
	"\n" +
	"\tsfs.proto\x12\bsfsproto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xf1\x01\n" +
	"\x10FilesystemConfig\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12#\n" +
	"\rfriendly_name\x18\x02 \x01(\tR\ffriendlyName\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12/\n" +
	"\ts3_config\x18\x04 \x01(\v2\x12.sfsproto.S3ConfigR\bs3Config\x128\n" +
	"\fchunk_config\x18\x05 \x01(\v2\x15.sfsproto.ChunkConfigR\vchunkConfig\"\xb3\x01\n" +
	"\bS3Config\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x16\n" +
	"\x06bucket\x18\x02 \x01(\tR\x06bucket\x12\x1d\n" +
	"\n" +
	"access_key\x18\x03 \x01(\tR\taccessKey\x12\x1d\n" +
	"\n" +
	"secret_key\x18\x04 \x01(\tR\tsecretKey\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12\x1d\n" +
	"\n" +
	"key_prefix\x18\x06 \x01(\tR\tkeyPrefix\"8\n" +
	"\vChunkConfig\x12)\n" +
	"\x11max_chunk_size_mb\x18\x01 \x01(\rR\x0emaxChunkSizeMb\"+\n" +
	"\x05Slice\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12\x12\n" +
	"\x04size\x18\x02 \x01(\rR\x04size\"\x8b\x01\n" +
	"\bSliceRef\x12\x19\n" +
	"\bslice_id\x18\x01 \x01(\x04R\asliceId\x12&\n" +
	"\x0foffset_in_slice\x18\x02 \x01(\rR\roffsetInSlice\x12\x16\n" +
	"\x06length\x18\x03 \x01(\rR\x06length\x12$\n" +
	"\x0eoffset_in_file\x18\x04 \x01(\x04R\foffsetInFile\"\x9d\x03\n" +
	"\x05Inode\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12,\n" +
	"\x04type\x18\x02 \x01(\x0e2\x18.sfsproto.Inode.FileTypeR\x04type\x12\x16\n" +
	"\x06length\x18\x03 \x01(\x04R\x06length\x12 \n" +
	"\vpermissions\x18\x04 \x01(\rR\vpermissions\x12\x10\n" +
	"\x03uid\x18\x05 \x01(\rR\x03uid\x12\x10\n" +
	"\x03gid\x18\x06 \x01(\rR\x03gid\x120\n" +
	"\x05mtime\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x05mtime\x120\n" +
	"\x05ctime\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x05ctime\x12%\n" +
	"\x0esymlink_target\x18\t \x01(\tR\rsymlinkTarget\x12*\n" +
	"\x06slices\x18\n" +
	" \x03(\v2\x12.sfsproto.SliceRefR\x06slices\"A\n" +
	"\bFileType\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\b\n" +
	"\x04FILE\x10\x01\x12\r\n" +
	"\tDIRECTORY\x10\x02\x12\v\n" +
	"\aSYMLINK\x10\x03\"T\n" +
	"\x0eDirectoryEntry\x12\x14\n" +
	"\x05inode\x18\x01 \x01(\x04R\x05inode\x12,\n" +
	"\x04type\x18\x02 \x01(\x0e2\x18.sfsproto.Inode.FileTypeR\x04typeB*Z(github.com/valandreev/studiofs-db-schemab\x06proto3"

var (
	file_sfs_proto_rawDescOnce sync.Once
	file_sfs_proto_rawDescData []byte
)

func file_sfs_proto_rawDescGZIP() []byte {
	file_sfs_proto_rawDescOnce.Do(func() {
		file_sfs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sfs_proto_rawDesc), len(file_sfs_proto_rawDesc)))
	})
	return file_sfs_proto_rawDescData
}

var file_sfs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sfs_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_sfs_proto_goTypes = []any{
	(Inode_FileType)(0),           // 0: sfsproto.Inode.FileType
	(*FilesystemConfig)(nil),      // 1: sfsproto.FilesystemConfig
	(*S3Config)(nil),              // 2: sfsproto.S3Config
	(*ChunkConfig)(nil),           // 3: sfsproto.ChunkConfig
	(*Slice)(nil),                 // 4: sfsproto.Slice
	(*SliceRef)(nil),              // 5: sfsproto.SliceRef
	(*Inode)(nil),                 // 6: sfsproto.Inode
	(*DirectoryEntry)(nil),        // 7: sfsproto.DirectoryEntry
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_sfs_proto_depIdxs = []int32{
	8, // 0: sfsproto.FilesystemConfig.created_at:type_name -> google.protobuf.Timestamp
	2, // 1: sfsproto.FilesystemConfig.s3_config:type_name -> sfsproto.S3Config
	3, // 2: sfsproto.FilesystemConfig.chunk_config:type_name -> sfsproto.ChunkConfig
	0, // 3: sfsproto.Inode.type:type_name -> sfsproto.Inode.FileType
	8, // 4: sfsproto.Inode.mtime:type_name -> google.protobuf.Timestamp
	8, // 5: sfsproto.Inode.ctime:type_name -> google.protobuf.Timestamp
	5, // 6: sfsproto.Inode.slices:type_name -> sfsproto.SliceRef
	0, // 7: sfsproto.DirectoryEntry.type:type_name -> sfsproto.Inode.FileType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_sfs_proto_init() }
func file_sfs_proto_init() {
	if File_sfs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sfs_proto_rawDesc), len(file_sfs_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sfs_proto_goTypes,
		DependencyIndexes: file_sfs_proto_depIdxs,
		EnumInfos:         file_sfs_proto_enumTypes,
		MessageInfos:      file_sfs_proto_msgTypes,
	}.Build()
	File_sfs_proto = out.File
	file_sfs_proto_goTypes = nil
	file_sfs_proto_depIdxs = nil
}
