// All comments in the code must be in English.
syntax = "proto3";

package sfsproto;

option go_package = "github.com/valandreev/studiofs-db-schema";

import "google/protobuf/timestamp.proto";

// ===================================================================
//  Filesystem Configuration & High-level Objects
// ===================================================================

// FilesystemConfig defines the primary configuration for a filesystem instance.
// It acts as the "passport" for a disk, containing all necessary connection
// and operational parameters.
// DB Key: "fs:config:<uuid>"
message FilesystemConfig {
  // Unique identifier for the filesystem (UUID).
  string uuid = 1;

  // User-facing, human-readable name for the filesystem (e.g., "Project_X_Renders").
  string friendly_name = 2;

  // Timestamp of when the filesystem was created.
  google.protobuf.Timestamp created_at = 3;

  // Configuration for the S3-compatible object storage backend.
  S3Config s3_config = 4;

  // Parameters for how files are chunked into slices.
  ChunkConfig chunk_config = 5;
}

// S3Config holds all necessary parameters to connect to an S3-compatible backend.
message S3Config {
  // The full URL of the S3 endpoint (e.g., "s3.us-west-2.amazonaws.com").
  string endpoint = 1;

  // The name of the S3 bucket where data will be stored.
  string bucket = 2;

  // The S3 access key credential.
  string access_key = 3;

  // The S3 secret key credential.
  string secret_key = 4;

  // The AWS region of the bucket (e.g., "us-east-1").
  string region = 5;

  // A prefix prepended to all S3 object keys, allowing the filesystem
  // to reside within a "subdirectory" of a bucket.
  // Example: "my-disk-name/framestore/"
  string key_prefix = 6;
}

// ChunkConfig defines parameters for file chunking.
message ChunkConfig {
  // The maximum size for a data chunk in megabytes (MB).
  // This also defines the standard size of a slice.
  uint32 max_chunk_size_mb = 1;
}

// ===================================================================
//  Metadata Schema
// ===================================================================

// Slice represents a single, contiguous block of data stored as an object in S3.
// A slice is the fundamental unit of storage. It can contain data from one or more files.
// DB Key: "slice:<slice_id>"
message Slice {
  // A globally unique identifier for this slice.
  uint64 id = 1;

  // The total size of this slice in bytes.
  uint32 size = 2;
}

// SliceRef represents a reference to a portion of a Slice that belongs to a specific file.
// A file is composed of an ordered list of one or more SliceRefs.
message SliceRef {
  // The ID of the Slice being referenced.
  uint64 slice_id = 1;

  // The starting offset of the data within the referenced slice.
  uint32 offset_in_slice = 2;

  // The length of the data segment within the slice that belongs to the file.
  uint32 length = 3;

  // The starting offset of this data segment within the file itself.
  uint64 offset_in_file = 4;
}

// Inode represents the metadata for a single filesystem object (file, directory, or symlink).
// It contains all information about an object except for its name and location in the hierarchy.
// DB Key: "inode:<fs_uuid>:<inode_id>"
message Inode {
  // Defines the type of the filesystem object.
  enum FileType {
    UNSPECIFIED = 0;
    FILE = 1;
    DIRECTORY = 2;
    SYMLINK = 3;
  }

  // The unique identifier for this inode within the filesystem.
  uint64 id = 1;

  // The type of object this inode represents.
  FileType type = 2;

  // The total logical size of the file in bytes. For directories and symlinks, this is typically 0.
  uint64 length = 3;

  // Access permissions in standard Unix octal format (e.g., 755).
  uint32 permissions = 4;

  // The user ID (UID) of the owner.
  uint32 uid = 5;

  // The group ID (GID) of the owner.
  uint32 gid = 6;

  // The timestamp of the last data modification (mtime).
  google.protobuf.Timestamp mtime = 7;

  // The timestamp of the last metadata change (ctime).
  google.protobuf.Timestamp ctime = 8;

  // If type is SYMLINK, this field stores the target path of the link.
  // It is unused for other file types.
  string symlink_target = 9;

  // An ordered list of slice references that constitute the file's content.
  // This field is only used for inodes of type FILE.
  repeated SliceRef slices = 10;
}

// DirectoryEntry represents an entry within a directory, linking a name to an inode.
// It forms the hierarchical structure of the filesystem.
// DB Key: "edge:<fs_uuid>:<parent_inode>:<name>"
message DirectoryEntry {
  // The inode number of the child object (file, directory, or symlink).
  uint64 inode = 1;

  // The type of the child object. Storing it here allows `ls` to be more
  // efficient by avoiding a separate Inode lookup for each entry.
  Inode.FileType type = 2;
}